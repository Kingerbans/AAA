package com.ngominhduc.pentest.controller;

import com.ngominhduc.pentest.model.project.ProjectModel;
import com.ngominhduc.pentest.service.project.CreateProject;
import com.ngominhduc.pentest.service.project.DeleteProject;
import com.ngominhduc.pentest.service.project.GetProject;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequestMapping("/api/v1/project-hanlder")
public class ProjectHandlerController {
    private final GetProject getProject;
    private final CreateProject createProject;
    private final DeleteProject deleteProject;

    public ProjectHandlerController(GetProject getProject, CreateProject createProject, DeleteProject deleteProject) {
        this.getProject = getProject;
        this.createProject = createProject;
        this.deleteProject = deleteProject;
    }

    @GetMapping("/project")
    public ResponseEntity<Object> getProjectByName(@RequestParam("name") String name) {
        return new ResponseEntity<>(getProject.getProjectByName(name), HttpStatus.OK);
    }

    @GetMapping("/project/{id}")
    public ResponseEntity<Object> getProjectById(@PathVariable("id") Long id) {
        return new ResponseEntity<>(getProject.getProjectById(id), HttpStatus.OK);
    }

    @PostMapping(value = "/project", consumes = "application/json", produces = "application/json")
    public ResponseEntity<Object> createProject(@RequestBody ProjectModel body) {
        if (body.getProjectName().matches("[a-zA-Z0-9_-]+")) {
            try {
                return new ResponseEntity<>(createProject.createProject(body), HttpStatus.OK);
            } catch (Exception e) {
                return new ResponseEntity<>("{\"status\":\"Failed\",\"message\":\"Project Name Already Existed.\"}  ", HttpStatus.INTERNAL_SERVER_ERROR);
            }
        }
        return new ResponseEntity<>("{\"status\":\"Failed\",\"message\":\"Project Name Must Contains Only Alphabets, Numbers, Underscores And Dashes ([a-zA-Z0-9_-]+)\"}", HttpStatus.INTERNAL_SERVER_ERROR);
    }

    @DeleteMapping("/project/{id}")
    public ResponseEntity<Object> deleteProject(@PathVariable("id") Long id) {
        deleteProject.deleteProject(id);
        return new ResponseEntity<>(HttpStatus.OK);
    }
}
