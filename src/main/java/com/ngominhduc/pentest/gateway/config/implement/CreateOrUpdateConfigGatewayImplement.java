package com.ngominhduc.pentest.gateway.config.implement;

import com.ngominhduc.pentest.common.annotation.Gateway;
import com.ngominhduc.pentest.gateway.config.CreateOrUpdateConfigGateway;
import com.ngominhduc.pentest.model.config.ConfigModel;
import com.ngominhduc.pentest.model.project.ProjectModel;
import com.ngominhduc.pentest.repository.ConfigModelRepository;
import com.ngominhduc.pentest.repository.ProjectModelRepository;
import org.springframework.beans.factory.annotation.Autowired;

@Gateway
public class CreateOrUpdateConfigGatewayImplement implements CreateOrUpdateConfigGateway {
    private final ConfigModelRepository configModelRepository;
    private final ProjectModelRepository projectModelRepository;

    @Autowired
    public CreateOrUpdateConfigGatewayImplement(ConfigModelRepository configModelRepository, ProjectModelRepository projectModelRepository) {
        this.configModelRepository = configModelRepository;
        this.projectModelRepository = projectModelRepository;
    }

    @Override
    public ConfigModel createOrUpdateConfig(ConfigModel config) {
        ProjectModel projectModel = getProjectById(config.getProjectModel().getId());
        ConfigModel configModel;
        if (projectModel == null) {
            configModel = ConfigModel.builder()
                    .scopes(config.getScopes())
                    .proxy(config.getProxy())
                    .extensionFilters(config.getExtensionFilters())
                    .excludesScopes(config.getExcludesScopes())
                    .projectModel(config.getProjectModel())
                    .build();
        } else {
            configModel = ConfigModel.builder()
                    .id(config.getId())
                    .scopes(config.getScopes())
                    .proxy(config.getProxy())
                    .extensionFilters(config.getExtensionFilters())
                    .excludesScopes(config.getExcludesScopes())
                    .projectModel(config.getProjectModel())
                    .build();
        }
        return configModelRepository.save(configModel);
    }

    @Override
    public ProjectModel getProjectById(Long id) {
        if (projectModelRepository.findById(id).isPresent()) {
            return projectModelRepository.findById(id).get();
        }
        throw new RuntimeException();
    }
}
